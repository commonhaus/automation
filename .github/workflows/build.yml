name: Build

on:
  workflow_dispatch:
  push:
    branches:
      - "main"
    paths-ignore:
      - '.gitignore'
      - 'CODEOWNERS'
      - 'LICENSE'
      - '*.md'
  pull_request:
    paths-ignore:
      - '.gitignore'
      - 'CODEOWNERS'
      - 'LICENSE'
      - '*.md'

env:
  JAVA_VERSION: 21
  JAVA_DISTRO: temurin
  GH_BOT_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"
  GH_BOT_NAME: "GitHub Action"
  GRAALVM_DIST: graalvm-community
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  main-root:
    outputs:
      is-main: ${{ steps.is-main-root.outputs.test }}
    runs-on: ubuntu-latest
    steps:
      - if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'commonhaus/automation'
        id: is-main-root
        run: echo "test=true" >> "$GITHUB_OUTPUT"

  build:
    needs: main-root
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: 21
        distribution: 'temurin'
        cache: maven

    - name: Generate cache key
      id: image-cache-key
      run: |
        echo "cache_key=build-image-cache-$(/bin/date -u "+%Y-%U")" >> $GITHUB_OUTPUT

    - name: Restore cached build image
      id: cache-restore
      uses: actions/cache/restore@v4
      with:
        path: build-image/mandrel.tar
        key: ${{ steps.image-cache-key.outputs.cache_key }}

    - name: Download build image
      if: steps.cache-restore.outputs.cache-hit != 'true'
      run: |
        mkdir -p build-image
        docker pull quay.io/quarkus/ubi-quarkus-mandrel-builder-image:jdk-21
        docker save quay.io/quarkus/ubi-quarkus-mandrel-builder-image:jdk-21 -o build-image/mandrel.tar

    - uses: actions/cache/save@v4
      id: cache-save
      if: always()
      with:
        path: build-image/mandrel.tar
        key: ${{ steps.image-cache-key.outputs.cache_key }}

    - name: Load build image
      id: load-build-image
      run: |
        docker load -i build-image/mandrel.tar

    - name: Project metadata
      id: metadata
      run: |
        SNAPSHOT=$(yq '.release.snapshot-version' .github/project.yml)
        echo "snapshot=${SNAPSHOT}" >> $GITHUB_OUTPUT

    - name: Build with Maven
      run: |
        ./mvnw -B -ntp formatter:validate verify

    - name: Build and run in native mode
      id: mvn-native-build
      env:
        MAVEN_OPTS: "-Xmx1g"
      run: |
        ./mvnw -B -ntp verify -DskipTests -DskipFormat \
          -Dnative \
          -Dquarkus.native.container-build=true \
          -Dquarkus.container-image.build=true

    - name: Update release with snapshot artifact
      if: ${{needs.main-root.outputs.is-main}}
      id: mvn-release-snapshot
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SNAPSHOT: ${{ steps.metadata.outputs.snapshot }}
      run: |
        git config user.name ${{ env.GH_BOT_NAME }}
        git config user.email ${{ env.GH_BOT_EMAIL }}

        CB=haus-rules-${SNAPSHOT}-runner
        ls -al ./haus-rules/target
        gh release upload "${SNAPSHOT}" --clobber ./haus-rules/target/${CB}.jar#${CB}.jar
        gh release upload "${SNAPSHOT}" --clobber ./haus-rules/target/${CB}#${CB}

        CB=haus-keeper-${SNAPSHOT}-runner
        ls -al ./haus-keeper/target
        gh release upload "${SNAPSHOT}" --clobber ./haus-keeper/target/${CB}.jar#${CB}.jar
        gh release upload "${SNAPSHOT}" --clobber ./haus-keeper/target/${CB}#${CB}

        CB=haus-manager-${SNAPSHOT}-runner
        ls -al ./haus-manager/target
        gh release upload "${SNAPSHOT}" --clobber ./haus-manager/target/${CB}.jar#${CB}.jar
        gh release upload "${SNAPSHOT}" --clobber ./haus-manager/target/${CB}#${CB}

        echo "Update tag for $SNAPSHOT"
        git push origin :refs/tags/$SNAPSHOT
        git tag -f $SNAPSHOT
        git push --tags

        echo "Update $SNAPSHOT release"
        gh release edit "${SNAPSHOT}"  -t "${SNAPSHOT}" --prerelease

    - name: Log in to the Container registry
      if: ${{needs.main-root.outputs.is-main}}
      uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish OCI (native)
      if: ${{needs.main-root.outputs.is-main}}
      id: publish-oci
      env:
        SNAPSHOT: ${{ steps.metadata.outputs.snapshot }}
      run: |
        image="commonhaus/haus-rules:${SNAPSHOT}"
        docker tag "${image}" "ghcr.io/${image}"
        docker push "ghcr.io/${image}"

        image="commonhaus/haus-keeper:${SNAPSHOT}"
        docker tag "${image}" "ghcr.io/${image}"
        docker push "ghcr.io/${image}"

        image="commonhaus/haus-manager:${SNAPSHOT}"
        docker tag "${image}" "ghcr.io/${image}"
        docker push "ghcr.io/${image}"

    - name: Mark snapshot release as non-draft
      if: ${{needs.main-root.outputs.is-main}}
      id: update-snapshot-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SNAPSHOT: ${{ steps.metadata.outputs.snapshot }}
      run: |
        gh release edit "${SNAPSHOT}" --draft=false
        gh release view "${SNAPSHOT}"

    - name: Delete snapshots artifacts from cache
      run: find ~/.m2 -name \*-SNAPSHOT -type d -exec rm -rf {} +

    - name: Trigger deploy
      id: trigger-deploy
      if: ${{needs.main-root.outputs.is-main}}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh workflow run -R 'commonhaus/automation' deploy.yml
